# Universal Windows Platform
# Build a Universal Windows Platform project using Visual Studio.
# Add steps that test and distribute an app, save build artifacts, and more:
# https://aka.ms/yaml

target:
  branch: rhel

pool:
  vmImage: 'windows-latest'

variables:
  solution: '**/*.sln'
  buildPlatform: 'x64'
  buildConfiguration: 'Release'
  appxPackageDir: '$(System.DefaultWorkingDirectory)\AppxPackages'

steps:
- task: DownloadBuildArtifacts@0
  inputs:
    buildType: 'specific'
    project: '69a61c30-d0ea-48c2-b3dc-5605a3802544'
    pipeline: '11'
    specificBuildWithTriggering: true
    buildVersionToDownload: 'latest'
    downloadType: 'single'
    artifactName: 'drop'
    downloadPath: '$(System.ArtifactsDirectory)'
- task: CmdLine@2
  inputs:
    script: |
      mkdir x64
      move $(System.ArtifactsDirectory)\drop\install_x64_rootfs.tar.gz x64\install8.tar.gz

- task: NuGetToolInstaller@1

- task: NuGetCommand@2
  inputs:
    restoreSolution: '$(solution)'
- task: DownloadSecureFile@1
  name: signingCert2
  inputs:
    secureFile: 'appsign.pfx'
- task: VSBuild@1
  inputs:
    solution: '$(solution)'
    msbuildArgs: '/t:PengwinEnterprise8 /m /p:AppxBundlePlatforms="$(buildPlatform)" /p:AppxPackageDir="$(appxPackageDir)" /p:AppxBundle=Always /p:UapAppxPackageBuildMode=SideloadOnly /p:PackageCertificateThumbprint=""  /p:PackageCertificateKeyFile="$(signingCert2.secureFilePath)" /p:PackageCertificatePassword="$(appsign)"'
    platform: 'x64'
    configuration: '$(buildConfiguration)'
    maximumCpuCount: true
    msbuildArchitecture: 'x64'

- task: CopyFiles@2
  inputs:
    SourceFolder: '$(appxPackageDir)'
    Contents: '**\*.appxbundle'
    TargetFolder: '$(Build.ArtifactStagingDirectory)'

- task: PublishBuildArtifacts@1
  inputs:
    PathtoPublish: '$(Build.ArtifactStagingDirectory)'
    ArtifactName: 'drop'
    publishLocation: 'Container'
